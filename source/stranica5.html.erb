<div class="stranica5">
  
  <div class="column">
    <div id="header">
      <h2></h2>
    </div>
  </div>

  <div class="column">
  	<div class="column3">
  	  <div id="jedan">
  		<h5></h5>
  	  </div>
  	</div>
  	<div class="column3">
  		<h5>Regarding file exten sions and parsers, layouts have a diffe rent function from templates in the building process, so care should be taken in giving them the right exte nsion. Here is why:
        As you might have gathered from the section on temp lates, file exten sions are sign ificant. For example, naming a layout file layout.html.erb would tell the language parser that it should take this file, which is erb and turn it into html.
        In a sense, reading the exte nsions from right to left, will tell you the parsings that the file will undergo, ending up as a file in the format of the leftmost ext ension. In the case of the example, conv erting an erb file to an html file when serving, and when building the file.
        Unlike templates, layouts should not be rendered to html. Giving a layout file the leftmost extension .html will cause an error when building. Ther efore, you should stick to the template language ext In a sense, reading the extensions from right to left, will tell you the parsings that the file will In a sense, reading the extensions from right to left, will tell you the parsings that the file will In a sense, reading the extensions from right to left, will tell you the parsings that the file will</h5>
    </div>
    <div class="column6">
      <div id="dva">
     	<h5></h5>
      </div>
    </div>
  </div>

  <div class="column">
	<div class="column3">
	  <div id="text2">
		<h5>Regarding file exten sions and parsers, layouts have a diffe rent function from templates in the building process, so care should be taken in giving them the right exte nsion. Here is why:
        As you might have gathered from the section on temp lates, file exten sions are sign ificant. For example, naming a layout file layout.html.erb would tell the language parser that it should take this file, which is erb and turn it into html.
        In a sense, reading the exte nsions from right to left, will tell you the parsings that the file will undergo, ending up as a file in the format of the leftmost ext ension. In the case of the example, conv erting an erb file to an html file when serving, and when building the file.
        Unlike templates, layouts should not be rendered to html. Giving a layout file the leftmost extension .html will cause an error when building. Ther efore, you should stick to the template language ext In a sense, reading the extensions from right to left, will tell you the parsings that the file will In a sense, reading the extensions from right to left, will tell you the parsings that the file will In a sense, reading the extensions from right to left, will tell you the parsings that the file will</h5>
	  </div>
    </div>
    <div class="column3">
      <div id="tri">
    	<h5></h5>
      </div>
    </div>
    <div class="column6">
      <div id="text3">
    	  <h5>Regarding file exten sions and parsers, layouts have a diffe rent function from templates in the building process, so care should be taken in giving them the right exte nsion. Here is why:
          As you might have gathered from the section on temp lates, file exten sions are sign ificant. For example, naming a layout file layout.html.erb would tell the language parser that it should take this file, which is erb and turn it into html.
          In a sense, reading the exte nsions from right to left, will tell you the parsings that the file will undergo, ending up as a file in the format of the leftmost ext ension. In the case of the example, conv erting an erb file to an html file when serving, and when building the file.
          Unlike templates, layouts should not be rendered to html. Giving a layout file the leftmost extension .html will cause an error when building. Ther efore, you should stick to the template language ext In a sense, reading the extensions from right to left, will tell you the parsings that the file will In a sense, reading the extensions from right to left, will tell you the parsings that the file will In a sense, reading the extensions from right to left, will tell you the parsings that the file willRegarding file exten sions and parsers, layouts have a diffe rent function from templates in the building process, so care should be taken in giving them the right exte nsion. Here is why:
          As you might have gathered from the section on temp lates, file exten sions are sign ificant. For example, naming a layout file layout.html.erb would tell the language parser that it should take this file, which is erb and turn it into html.
          In a sense, reading the exte nsions from right to left, will tell you the parsings that the file will undergo, ending up as a file in the format of the leftmost ext ension. In the case of the example, conv erting an erb file to an html file when serving, and when building the file.
          Unlike templates, layouts should not be rendered to html. Giving a layout file the leftmost extension .html will cause an error when building. Ther efore, you should stick to the template language ext In </h5>
      </div>
    </div>
  </div>

  <div class="column">
  	<div class="column3">
  		<div id="cetri">
  		  <h5></h5>
  	    </div>
    </div>
    <div class="column3">
  	  <div id="text4">
  	      <h5>Regarding file exten sions and parsers, layouts have a diffe rent function from templates inhe    ing process, so care should be taken in giving them the right exte nsion. Here is why:
          As you might have gathered from the section on temp lates, file exten sions are sign ificant. For example, naming a layout file layout.html.erb would tell the language parser that it should take this file, which is erb and turn it into html example, naming a layout file layout.html.erb would tell the language parser that it should take this file, which is erb and turn it into html.</h5>
      </div>
    </div>
    <div class="column6">
      <div id="pet">
    	<h5></h5>
      </div>
    </div>
  </div>
</div>
